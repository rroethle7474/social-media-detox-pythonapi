trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore

variables:
  pythonVersion: '3.12'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'

    # Install Chrome for Selenium
    - script: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
        
        echo "##vso[task.setvariable variable=WDM_LOG_LEVEL]0"
        echo "##vso[task.setvariable variable=WDM_PROGRESS_BAR]0"
      displayName: 'Install Chrome'

    # Create startup script
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cat > $(Build.ArtifactStagingDirectory)/startup.sh << 'EOF'
          #!/bin/bash
          
          # Install Chrome
          if ! command -v google-chrome &> /dev/null; then
              echo "Installing Chrome..."
              curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
              echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
              apt-get update
              apt-get install -y google-chrome-stable
          fi

          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          
          # Start the application
          gunicorn --bind=0.0.0.0 --timeout 600 --workers 2 --threads 2 app:app
          EOF

          chmod +x $(Build.ArtifactStagingDirectory)/startup.sh
      displayName: 'Create startup script'

    # Create test environment file
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cat > $(Build.ArtifactStagingDirectory)/.env.test << EOF
          TWITTER_USERNAME=$(TWITTER_USERNAME)
          TWITTER_PASSWORD=$(TWITTER_PASSWORD)
          TWITTER_PHONE_NUMBER=$(TWITTER_PHONE_NUMBER)
          TWITTER_BASE_URL=https://x.com
          EOF
      displayName: 'Create test environment file'
      env:
        TWITTER_USERNAME: $(TWITTER_USERNAME)
        TWITTER_PASSWORD: $(TWITTER_PASSWORD)
        TWITTER_PHONE_NUMBER: $(TWITTER_PHONE_NUMBER)

    # Create prod environment file
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cat > $(Build.ArtifactStagingDirectory)/.env.prod << EOF
          TWITTER_USERNAME=$(TWITTER_USERNAME)
          TWITTER_PASSWORD=$(TWITTER_PASSWORD)
          TWITTER_PHONE_NUMBER=$(TWITTER_PHONE_NUMBER)
          TWITTER_BASE_URL=https://x.com
          EOF
      displayName: 'Create prod environment file'
      env:
        TWITTER_USERNAME: $(TWITTER_USERNAME)
        TWITTER_PASSWORD: $(TWITTER_PASSWORD)
        TWITTER_PHONE_NUMBER: $(TWITTER_PHONE_NUMBER)

    # Copy project files
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/*.py
          requirements.txt
          .env.example
          models/**
          services/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy project files'

    # Archive files
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true
      displayName: 'Archive project files'

    # Publish artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish artifacts'

- stage: DeployTest
  displayName: 'Deploy to Test'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployTest
    environment: 'test'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-pythonapi-test'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              appType: 'webAppLinux'
              runtimeStack: 'PYTHON|3.12'
              startUpCommand: '/bin/bash startup.sh'

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployTest
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    environment: 'prod'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-pythonapi-prod'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              appType: 'webAppLinux'
              runtimeStack: 'PYTHON|3.12'
              startUpCommand: '/bin/bash startup.sh'